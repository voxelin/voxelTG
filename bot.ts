import { Bot } from "grammy";
import { hydrate } from "@grammyjs/hydrate";
import moment from "moment-timezone";
import { schedule } from "./data/schedule";
import { messages } from "./data/messages";
import { botcontext } from './bot.d';
import { parseMode } from "@grammyjs/parse-mode";


const bot = new Bot<botcontext>(<string>process.env.BOT_TOKEN);

moment.tz.setDefault("Europe/Kyiv");

bot.api.config.use(parseMode("HTML"));
bot.use(hydrate());


bot.command("start", (ctx) => {
    ctx.reply("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n" + "/link - –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è\n" + "/sch - —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å\n" + "/help - –¥–æ–ø–æ–º–æ–≥–∞\n" + "/about - –ø—Ä–æ –±–æ—Ç–∞");
});

bot.command("about", (ctx) => {
    ctx.reply("–¶–µ–π –±–æ—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É –∑–∞–Ω—è—Ç—å —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è.\n\n" + "–†–æ–∑—Ä–æ–±–Ω–∏–∫: @ieljit");
});

bot.command("help", (ctx) => {
    ctx.reply("–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–æ–±–æ—Ç–æ—é –±–æ—Ç–∞, –Ω–∞–ø–∏—à—ñ—Ç—å @ieljit");
});

bot.command("sch", (ctx) => {
    ctx.reply(messages[moment().format("dddd")], { parse_mode: "MarkdownV2" });
});


const sendlink = () => {
    let day = moment().format("dddd");
    let time = moment().format("HH:mm");
    let link = "";
    let sent = false;
    let name = "";
    for (let i = 0; i < schedule[day].length; i++) {
        if (time >= schedule[day][i].start && time <= schedule[day][i].end) {
            link = schedule[day][i].link;
            name = schedule[day][i].name;
            sent = schedule[day][i].sent || false;
            schedule[day][i].sent = true
            break;
        }
    }
    return [link, name, sent];
}


setInterval(() => {
    let data = sendlink();
    let link = data[0];
    let name = data[1];
    let sent = data[2];
    if (link != "" && !sent) {
        bot.api.sendMessage(<string>process.env.GROUP_ID, `<b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è —É—Ä–æ–∫ ${name}</b> \n${link}`);
    }
}, 1000 * 60);


bot.command("link", async (ctx) => {
    let data = sendlink();
    let link = data[0];
    let name = data[1];
    if (link != "") {
        ctx.reply(`<b>${name}</b> \n${link}`);
    } else {
        ctx.reply("–ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Ä–≤–∞ –∞–±–æ –∂ —É—Ä–æ–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å. ü§î");
    }
});

bot.start();