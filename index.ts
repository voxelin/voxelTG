import { urls, mgs } from './index.d';
import { Bot, Context } from "grammy";
import moment from "moment-timezone";
import { hydrate, HydrateFlavor } from "@grammyjs/hydrate";
type botcontext = HydrateFlavor<Context>;
moment.tz.setDefault("Europe/Kyiv");
const bot = new Bot<botcontext>(<string>process.env.BOT_TOKEN);
import { parseMode } from "@grammyjs/parse-mode";
import { readFileSync } from "fs";
const messages: mgs = JSON.parse(readFileSync("./data/messages.json", "utf-8"));
const links: urls = JSON.parse(readFileSync("./data/links.json", "utf-8"));
const english_group_message = `1. <a href="${links["EnglishA"]}">–ß–µ–ø—É—Ä–Ω–∞ –í—ñ–∫—Ç–æ—Ä—ñ—è –í—ñ–∫—Ç–æ—Ä—ñ–≤–Ω–∞</a>\n2. <a href="${links["EnglishB"]}">–û–ª—å–≥–∞ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∞ –î—É–Ω—å–∫–æ</a>`
const informatics_group_message = `${links["InformaticsA"]} \n ${links["InformaticsB"]}`;
const schedule: { [key: string]: { start: string, end: string, link: string, name: string, sent?: boolean }[] } = {
    "Monday": [
        { start: "08:15", end: "09:00", link: links["German"], name: "üí¨ –ù—ñ–º–µ—Ü—å–∫–∞" },
        { start: "09:15", end: "10:00", link: links["Physics"], name: "üî¨ –§—ñ–∑–∏–∫–∞" },
        { start: "10:15", end: "11:00", link: english_group_message, name: "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞" },
        { start: "11:15", end: "12:00", link: links["Chemistry"], name: "üß™ –•—ñ–º—ñ—è" },
        { start: "12:10", end: "12:55", link: links["Algebra"], name: "üìê –ê–ª–≥–µ–±—Ä–∞" },
        { start: "13:05", end: "13:50", link: links["Ukrainian"], name: "üìö –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞" },
    ],
    "Tuesday": [
        { start: "08:15", end: "09:00", link: links["FLit"], name: "üìö –ó–∞—Ä—É–±—ñ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞" },
        { start: "09:15", end: "10:00", link: links["Art"], name: "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ" },
        { start: "10:15", end: "11:00", link: links["Geometry"], name: "üìê –ì–µ–æ–º–µ—Ç—Ä—ñ—è" },
        { start: "11:15", end: "12:00", link: links["UkrainianLit"], name: "üìö –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞" },
        { start: "12:10", end: "12:55", link: links["History"], name: "üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏" },
        { start: "13:05", end: "13:50", link: links["Ukrainian"], name: "üìö –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞" },
        { start: "14:00", end: "14:45", link: links["Geography"], name: "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è" },
    ],
    "Wednesday": [
        { start: "08:15", end: "09:00", link: links["History"], name: "üìú –í—Å–µ—Å–≤—ñ—Ç–Ω—è –Ü—Å—Ç–æ—Ä—ñ—è" },
        { start: "09:15", end: "10:00", link: links["Physics"], name: "üî¨ –§—ñ–∑–∏–∫–∞" },
        { start: "10:15", end: "11:00", link: english_group_message, name: "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞" },
        { start: "11:15", end: "12:00", link: links["Chemistry"], name: "üß™ –•—ñ–º—ñ—è" },
        { start: "12:10", end: "12:55", link: english_group_message, name: "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞" },
        { start: "13:05", end: "13:50", link: informatics_group_message, name: "üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" },
        { start: "14:00", end: "14:45", link: links["Biology"], name: "ü¶† –ë—ñ–æ–ª–æ–≥—ñ—è" },
    ],
    "Thursday": [
        { start: "08:15", end: "09:00", link: links["Algebra"], name: "üìê –ê–ª–≥–µ–±—Ä–∞" },
        { start: "09:15", end: "10:00", link: links["FLit"], name: "üìö –ó–∞—Ä—É–±—ñ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞" },
        { start: "10:15", end: "11:00", link: links["Physics"], name: "üî¨ –§—ñ–∑–∏–∫–∞" },
        { start: "11:15", end: "12:00", link: links["Law"], name: "üìú –ü—Ä–∞–≤–æ–∑–Ω–∞–≤—Å—Ç–≤–æ" },
        { start: "12:10", end: "12:55", link: links["German"], name: "üí¨ –ù—ñ–º–µ—Ü—å–∫–∞" },
        { start: "13:05", end: "13:50", link: english_group_message, name: "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞" },
        { start: "14:00", end: "14:45", link: links["Geography"], name: "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è" },
    ],
    "Friday": [
        { start: "09:15", end: "10:00", link: links["UkrainianLit"], name: "üìö –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞" },
        { start: "10:15", end: "11:00", link: english_group_message, name: "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞" },
        { start: "11:15", end: "12:00", link: links["Biology"], name: "ü¶† –ë—ñ–æ–ª–æ–≥—ñ—è" },
        { start: "12:10", end: "12:55", link: links["Geometry"], name: "üìê –ì–µ–æ–º–µ—Ç—Ä—ñ—è" },
        { start: "13:05", end: "13:50", link: informatics_group_message, name: "üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" },
    ],
}
bot.api.config.use(parseMode("HTML"));
bot.use(hydrate());
bot.command("start", (ctx) => {
    ctx.reply("–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /sch");
});
bot.command("sch", (ctx) => {
    ctx.reply(messages[moment().format("dddd")], { parse_mode: "MarkdownV2" });
});

const sendlink = () => {
    let day = moment().format("dddd");
    let time = moment().format("HH:mm");
    let link = "";
    let sent = false;
    let name = "";
    for (let i = 0; i < schedule[day].length; i++) {
        if (time >= schedule[day][i].start && time <= schedule[day][i].end) {
            link = schedule[day][i].link;
            name = schedule[day][i].name;
            sent = schedule[day][i].sent || false;
            schedule[day][i].sent = true
            break;
        }
    }
    return [link, name, sent];
}


setInterval(() => {
    let data = sendlink();
    let link = data[0];
    let name = data[1];
    let sent = data[2];
    if (link != "" && !sent) {
        bot.api.sendMessage(<string>process.env.GROUP_ID, `<b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è —É—Ä–æ–∫ ${name}</b> \n${link}`);
    }
}, 1000 * 60);

bot.command("link", async (ctx) => {
    let data = sendlink();
    let link = data[0];
    let name = data[1];
    if (link != "") {
        ctx.reply(`<b>${name}</b> \n${link}`);
    } else {
        ctx.reply("–ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Ä–≤–∞ –∞–±–æ –∂ —É—Ä–æ–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å. ü§î");
    }
});

bot.start();