import moment from "moment-timezone";
import { CustomContext } from "../typings/bot";
import { schedule_days_menu, show_schedule } from "../typings/menu";
import { SchedulerBot } from "./core";
import { CommandHandlerError } from "./errors";

export class CommandHandler<Context extends CustomContext = CustomContext> {
    constructor(private readonly bot: SchedulerBot<Context>) {}

    public async start(ctx: Context) {
        await ctx.reply("–ü—Ä–∞—Ü—é—é –Ω–∞ –±–ª–∞–≥–æ —É—á–Ω—ñ–≤ –ª—ñ—Ü–µ—é ü§ñ\n–ê–≤—Ç–æ—Ä: @voxelin", { parse_mode: "Markdown" });
    }

    public async help(ctx: Context) {
        await ctx.reply("–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–æ–±–æ—Ç–æ—é –±–æ—Ç–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ @voxelin üôÇ");
    }

    public async about(ctx: Context) {
        await ctx.reply(
            "–¶–µ–π –±–æ—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É –∑–∞–Ω—è—Ç—å —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è.\n" +
                "–†–æ–∑—Ä–æ–±–Ω–∏–∫: @voxelin",
        );
    }

    public async link(ctx: Context) {
        if (moment().format("dddd") == "Sunday" || moment().format("dddd") == "Saturday")
            return await ctx.reply("–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π, –∑–∞–Ω—è—Ç—å –Ω–µ–º–∞—î üôÇ");
        const data = await this.bot.requestLink(ctx);
        const week = moment().isoWeek() % 2;
        const link = data![0];
        let name = data![1];
        switch (name) {
            case "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ | üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è":
                if (week == 1) {
                    name = "üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è";
                } else {
                    name = "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ";
                }
                break;
            case "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è | üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏":
                if (week == 1) {
                    name = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏";
                } else {
                    name = "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è";
                }
                break;
            default:
                break;
        }
        if (link != "") {
            data![3] == true
                ? await ctx.reply(`–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫: <b>${name}</b> \n${link}`)
                : await ctx.reply(`–£—Ä–æ–∫ <b>${name}</b> –≤–∂–µ –ø–æ—á–∞–≤—Å—è: \n${link}`);
        } else {
            await ctx.reply("–ù–∞ –∂–∞–ª—å, –Ω–∞ —É—Ä–æ–∫ <code>" + name + "</code> –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–º–∞—î. ü§î");
        }
    }

    public async schedule(ctx: Context) {
        await ctx.reply(show_schedule(moment().format("dddd")), {
            parse_mode: "Markdown",
            reply_markup: schedule_days_menu,
            disable_web_page_preview: true,
        });
    }

    public async handle(ctx: Context, command?: string) {
        if (!command)
            throw new CommandHandlerError(
                "No command trigger provided. Please, provide a trigger without slash, e.g /start -> start",
            );
        if (command.startsWith("/")) {
            throw new CommandHandlerError(
                "Command trigger should not start with slash. Please, provide a trigger without slash, e.g /start -> start",
            );
        }
        try {
            await this[command as keyof CommandHandler](ctx);
        } catch (e) {
            if (e instanceof TypeError) {
                return;
            } else if (e instanceof CommandHandlerError) {
                await ctx.reply("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏. –ü–æ–≤—ñ–¥–æ–º—Ç–µ @voxelin üôÇ");
                this.bot.logger.warn("Command handler failed to process command trigger: " + command);
            } else {
                this.bot.logger.error(String(e));
            }
        }
    }
}
