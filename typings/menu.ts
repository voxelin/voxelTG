import { Menu } from "@grammyjs/menu";
import { schedule } from "../data/schedule";
import { v4 as uuidv4 } from "uuid";

export const show_schedule = (day: string) => {
    const days_i18n:any = {
        "Monday": "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
        "Tuesday": "–í—ñ–≤—Ç–æ—Ä–æ–∫",
        "Wednesday": "–°–µ—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä",
        "Friday": "–ü'—è—Ç–Ω–∏—Ü—è",
    }
    let message = `üóìÔ∏è *–ì—Ä–∞—Ñ—ñ–∫ –Ω–∞* _${days_i18n[day]}_:\n`;
    if (day != "Saturday" && day != "Sunday") {
        schedule[day].forEach((item) => {
            switch (item.name) {
                case "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞":
                    message += `‚ö¨ _${item.start}_-_${item.end}_ ‚Äî ${item.name} ([–ß–µ–ø—É—Ä–Ω–∞](${item.link[0]}) | [–î—É–Ω—å–∫–æ](${item.link[1]}))\n`;
                    break;
                case "üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
                    message += `‚ö¨ _${item.start}_-_${item.end}_ ‚Äî ${item.name} ([–ë–µ–¥–Ω–∞—Ä](${item.link[0]}) | [–®–µ—Ä–µ–º–µ—Ç](${item.link[1]}))\n`;
                    break;
                default:
                    message += `‚ö¨ _${item.start}_-_${item.end}_ ‚Äî [${item.name}](${item.link})\n`;
            }
        });
    } else {
        message = "‚ùå *–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π!*"
    }
    message += "\n`ID: "+ uuidv4() +"`";
    return message;
}

export const schedule_days_menu = new Menu("schedule_days_menu", { onMenuOutdated: "Updated, try now." })
    .text("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", (ctx) => {
        if (ctx.update.message?.from?.id != ctx.from.id) return ctx.answerCallbackQuery("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–Ω–æ–ø–∫—É!");
        let s = show_schedule("Monday");
        ctx.editMessageText(s, { parse_mode: "Markdown", disable_web_page_preview: true })
    })
    .text("–í—ñ–≤—Ç–æ—Ä–æ–∫", async (ctx) => {
        if (ctx.update.message?.from?.id != ctx.from.id) return ctx.answerCallbackQuery("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–Ω–æ–ø–∫—É!");
        let s = show_schedule("Tuesday");
        ctx.editMessageText(s, { parse_mode: "Markdown", disable_web_page_preview: true })
    })
    .text("–°–µ—Ä–µ–¥–∞", async (ctx) => {
        if (ctx.update.message?.from?.id != ctx.from.id) return ctx.answerCallbackQuery("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–Ω–æ–ø–∫—É!");
        let s = show_schedule("Wednesday");
        ctx.editMessageText(s, { parse_mode: "Markdown", disable_web_page_preview: true })
    }).row()
    .text("–ß–µ—Ç–≤–µ—Ä", async (ctx) => {
        if (ctx.update.message?.from?.id != ctx.from.id) return ctx.answerCallbackQuery("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–Ω–æ–ø–∫—É!");
        let s = show_schedule("Thursday");
        ctx.editMessageText(s, { parse_mode: "Markdown", disable_web_page_preview: true })
    })
    .text("–ü'—è—Ç–Ω–∏—Ü—è", async (ctx) => {
        if (ctx.update.message?.from?.id != ctx.from.id) return ctx.answerCallbackQuery("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–Ω–æ–ø–∫—É!");
        let s = show_schedule("Friday");
        ctx.editMessageText(s, { parse_mode: "Markdown", disable_web_page_preview: true })
    })
